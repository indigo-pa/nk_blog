{"0": {
    "doc": "Documentație",
    "title": "Introducere publicații istorice.",
    "content": "Listă articole. | Cuvânt înainte | Ordinea publicațiilor. | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/Documentatie.html#introducere-publica%C8%9Bii-istorice",
    "relUrl": "/docs/Bitcoin/Documentatie.html#introducere-publicații-istorice"
  },"1": {
    "doc": "Documentație",
    "title": "Cuvânt înainte",
    "content": "Pe 3 ianuarie 2009, un programator (sau programatori) anonim sub numele de Satoshi Nakamoto a exploatat primul bloc al blockchain-ului Bitcoin, lansând astfel prima cripto-monedă aplicabilă din lume. Cu toate acestea, Satoshi nu a construit Bitcoin dintr-un vid de idei. În schimb, acestă rețea a fost construită cu ajutorul giganților criptografici si a software-ului open source. De la Timothy C. May, la Richard Stallman, Nick Szabo și nu numai, bazele Bitcoin au fost construite de o rețea distribuită de inovatori care doreau să utilizeze software-ul criptografic și open source pentru a aduce libertatea într-o lume dependentă. Dedicată exclusiv aspectelor tehnice, documentația conține articole care prezintă și descriu inovațiile tehnologice precedente erei Bitcoin. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/Documentatie.html#cuv%C3%A2nt-%C3%AEnainte",
    "relUrl": "/docs/Bitcoin/Documentatie.html#cuvânt-înainte"
  },"2": {
    "doc": "Documentație",
    "title": "Ordinea publicațiilor.",
    "content": "| Articol | Autor | Data | . | Bitcoin: A Peer-to-Peer Electronic Cash System | Satoshi Nakamoto | 2008 | . | b-money | Wei Dai | 1998 | . | Design of a Secure Timestamping Service with Minimal Trust Requirements | Jean-Jacques Quisquater, Henri Massias, and Xavier Serret-Avila | 1999 | . | How to Time-Stamp a Digital Document | W. Scott Stornetta and Stuart Haber | 1991 | . | Improving the Efficiency and Reliability of Digital Time-Stamping | W. Scott Stornetta and Stuart Habe &amp; Dave Bayer | 1992 | . | Secure Names for Bit-Strings | W. Scott Stornetta and Stuart Habea | 1997 | . | Hashcash - A Denial of Service Counter-Measure | Adam Back | 2002 | . | Protocols for Public Key Cryptosystems | Ralph C. Merkle | 1978 | . | An Introduction to Probability Theory and Its Applications, Vol. I | William Feller | 1957 | . | The Crypto Anarchist Manifesto | Timothy C. May | 1988 | . | The Cyphernomicon | Timothy C. May | 1994 | . | Crypto Anarchy and Virtual Communities | Timothy C. May | 1994 | . | Libertaria in Cyberspace | Timothy C. May | 1992 | . | Crypto Glossary | Timothy C. May și Eric Hughes | 1992 | . | Cyberspace, Crypto Anarchy, and Pushing Limits | Timothy C. May | 1994 | . | Formalizing and Securing Relationships on Public Networks | Nick Szabo | 1997 | . | A Formal Language for Analyzing Contracts | Nick Szabo | 2002 | . | Secure Property Titles with Owner Authority | Nick Szabo | 1998 | . | Trusted Third Parties are Security Holes | Nick Szabo | 2001 | . | Contracts with Bearer | Nick Szabo | 1999 | . | The God Protocols | Nick Szabo | 1999 | . | Multinational Small Business | Nick Szabo | 1993 | . | Shelling Out: The Origins of Money | Nick Szabo | 2002 | . | The Playdough Protocols | Nick Szabo | 2002 | . | Measuring Value | Nick Szabo | 2002 | . | Advances in Distributed Security | Nick Szabo | 2003 | . | Micropayments and Mental Transaction Costs | Nick Szabo | 1999 | . | Bit Gold | Nick Szabo | 2005 | . | Intrapolynomial Cryptography | Nick Szabo | 1999 | . | Negative Reputation | Nick Szabo | 1996 | . | Scarce Objects | Nick Szabo | 2004 | . | Smart Contracts Glossary | Nick Szabo | 1995 | . | Money, Blockchains, and Social Scalability | Nick Szabo | 2017 | . | The Idea of Smart Contracts | Nick Szabo | 1997 | . | Confidential Auditing | Nick Szabo | 1998 | . | Proplets: Devices for Controlling Property | Nick Szabo | 2001 | . | Detecting Double Spending | Hal Finney | 1993 | . | Digital Cash &amp; Privacy | Hal Finney | 1993 | . | Bitcoin and Me | Hal Finney | 2013 | . | RPOW - Reusable Proofs of Work | Hal Finney | 2004 | . | PGP Web of Trust Misconceptions | Hal Finney | 1994 | . | For-Pay Remailers | Hal Finney | 1994 | . | Politics vs Technology | Hal Finney | 1994 | . | The Ricardian Contract | Ian Grigg | 2004 | . | Triple Entry Accounting | Ian Grigg | 2005 | . | Financial Cryptography in 7 Layers | Ian Grigg | 2000 | . | Untraceable Electronic Mail, Return Addresses, and Digital Pseudonyms | David Chaum | 1988 | . | Blind Signatures for Untraceable Payments | David Chaum | 1982 | . | The Dining Cryptographers Problem: Unconditional Sender and Recipient Untraceability | David Chaum | 1988 | . | Online Cash Checks | David Chaum | 1989 | . | Computer Systems Established, Maintained, and Trusted by Mutually Suspicious Groups | David Chaum | 1982 | . | Contracts in Cyberspace | David D. Friedman | 2000 | . | From Imperial China to Cyberspace: Contracting Without the State | David D. Friedman | 2005 | . | The Case for Privacy | David D. Friedman | 2005 | . | The Machinery of Freedom (2nd Edition) | David D. Friedman | 1989 | . | New Directions in Cryptography | Whitfield Diffie and Martin E. Hellman | 1976 | . | A Method for Obtaining Digital Signatures and Public-key Cryptosystems | Ronald L. Rivest, Leonard M. Adleman, and Adi Shamir | 1978 | . | Proofs that Yield Nothing But Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems | Silvio Micali, Avi Wigderson, and Oded Goldreich | 1991 | . | Secure Communications over Insecure Channels | Ralph C. Merkle | 1978 | . | Truledger in Plain English | Bill St. Clair | 2008 | . | A Cypherpunk’s Manifesto | Eric Hughes | 1993 | . | State and Terrorist Conspiracies &amp; Conspiracy as Governance | Julian Assange | 2006 | . | The Art of Unix Programming | Eric S. Raymond | 2003 | . | The Theory of Money and Credit | Ludwig von Mises | 1953 | . | Deflation and Liberty | Jörg Guido Hülsmann | 2008 | . | Money, Bank Credit, and Economic Cycles (Third Edition) | Jesús Huerta de Soto | 2012 | . | Denationalisation of Money: The Argument Refined | Friedrich A. Hayek | 1978 | . | Against Intellectual Property | N. Stephan Kinsella | 2008 | . | Against Intellectual Monopoly | Michele Boldrin and David K. Levine | 2008 | . | The Right to Read: A Dystopian Short Story | Richard M. Stallman | 1997 | . | Areopagitica: A Speech for the Liberty of Unlicensed Printing to the Parliament of England | John Milton | 1644 | . | The libbitcoin Manifesto | Amir Taaki | 2013 | . | The Cathedral and the Bazaar | Eric S. Raymond | 2000 | . | Lucre: Anonymous Electronic Tokens v1.8 | Ben Laurie | 2008 | . | Why I Wrote PGP” | Philip R. Zimmermann | 1991 | . | From Crossbows To Cryptography: Techno-Thwarting The State | Chuck Hammill | 1987 | . | Capability-based Financial Instruments” | Chip Morningstar, Mark S. Miller, and Bill Frantz | 2000 | . | The Byzantine Generals Problem” | Robert Shostak, Leslie Lamport, and Marshall Pease | 1982 | . | Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial | Fred B. Schneider | 1990 | . | On Digital Cash-Like Payment Systems | Daniel A. Nagy | 2005 | . | Reflections on Trusting Trust | Ken Thompson | 1984 | . | The Sybil Attack | John R. Douceur | 2002 | . | Improving Time Stamping Schemes: A Distributed Point of View | Alexis Bonnecaze, Pierre Liardet, Alban Gabillon, and Kaouther Blibech | 2002 | . | The Geodesic Market | Robert Hettinga | 1998-1999 | . | A Declaration of the Independence of Cyberspace | John Perry Barlow | 1996 | . | Secrecy, Authentication, and Public Key Systems | Ralph C. Merkle | 1979 | . | The Ethics of Money Production | Jörg Guido Hülsmann | 2008 | . | On the Origins of Money | Carl Menger | 1892 | . | What Has Government Done to Our Money? | Murray N. Rothbard | 1963 | . | Human Action: A Treatise on Economics | Ludwig von Mises | 1949 | . | The Mystery of Banking Murray | N. Rothbard | 1983 | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/Documentatie.html#ordinea-publica%C8%9Biilor",
    "relUrl": "/docs/Bitcoin/Documentatie.html#ordinea-publicațiilor"
  },"3": {
    "doc": "Documentație",
    "title": "Documentație",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/Documentatie.html",
    "relUrl": "/docs/Bitcoin/Documentatie.html"
  },"4": {
    "doc": "Analiză tehnică",
    "title": "Analiză tehnică",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/analiza.html",
    "relUrl": "/docs/Bitcoin/analiza.html"
  },"5": {
    "doc": "Analiză tehnică",
    "title": "Cuprins",
    "content": ". | Stock-to-Flow | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/analiza.html#cuprins",
    "relUrl": "/docs/Bitcoin/analiza.html#cuprins"
  },"6": {
    "doc": "Analiză tehnică",
    "title": "Stock-to-Flow",
    "content": "By default, Just the Docs uses a native system font stack for sans-serif fonts: . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/analiza.html#stock-to-flow",
    "relUrl": "/docs/Bitcoin/analiza.html#stock-to-flow"
  },"7": {
    "doc": "b-money",
    "title": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "content": ". | Rezumat | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/b_money.html#bitcoin-a-peer-to-peer-electronic-cash-system",
    "relUrl": "/docs/Bitcoin/b_money.html#bitcoin-a-peer-to-peer-electronic-cash-system"
  },"8": {
    "doc": "b-money",
    "title": "Rezumat",
    "content": "I am fascinated by Tim May’s crypto-anarchy. Unlike the communities traditionally associated with the word “anarchy”, in a crypto-anarchy the government is not temporarily destroyed but permanently forbidden and permanently unnecessary. It’s a community where the threat of violence is impotent because violence is impossible, and violence is impossible because its participants cannot be linked to their true names or physical locations. Until now it’s not clear, even theoretically, how such a community could operate. A community is defined by the cooperation of its participants, and efficient cooperation requires a medium of exchange (money) and a way to enforce contracts. Traditionally these services have been provided by the government or government sponsored institutions and only to legal entities. In this article I describe a protocol by which these services can be provided to and by untraceable entities. I will actually describe two protocols. The first one is impractical, because it makes heavy use of a synchronous and unjammable anonymous broadcast channel. However it will motivate the second, more practical protocol. In both cases I will assume the existence of an untraceable network, where senders and receivers are identified only by digital pseudonyms (i.e. public keys) and every messages is signed by its sender and encrypted to its receiver. In the first protocol, every participant maintains a (seperate) database of how much money belongs to each pseudonym. These accounts collectively define the ownership of money, and how these accounts are updated is the subject of this protocol. The creation of money. Anyone can create money by broadcasting the solution to a previously unsolved computational problem. The only conditions are that it must be easy to determine how much computing effort it took to solve the problem and the solution must otherwise have no value, either practical or intellectual. The number of monetary units created is equal to the cost of the computing effort in terms of a standard basket of commodities. For example if a problem takes 100 hours to solve on the computer that solves it most economically, and it takes 3 standard baskets to purchase 100 hours of computing time on that computer on the open market, then upon the broadcast of the solution to that problem everyone credits the broadcaster’s account by 3 units. The transfer of money. If Alice (owner of pseudonym KA) wishes to transfer X units of money to Bob (owner of pseudonym KB), she broadcasts the message “I give X units of money to KB” signed by KA. Upon the broadcast of this message, everyone debits KA’s account by X units and credits KB’s account by X units, unless this would create a negative balance in KA’s account in which case the message is ignored. The effecting of contracts. A valid contract must include a maximum reparation in case of default for each participant party to it. It should also include a party who will perform arbitration should there be a dispute. All parties to a contract including the arbitrator must broadcast their signatures of it before it becomes effective. Upon the broadcast of the contract and all signatures, every participant debits the account of each party by the amount of his maximum reparation and credits a special account identified by a secure hash of the contract by the sum the maximum reparations. The contract becomes effective if the debits succeed for every party without producing a negative balance, otherwise the contract is ignored and the accounts are rolled back. A sample contract might look like this: . KA agrees to send KB the solution to problem P before 0:0:0 1/1/2000. KB agrees to pay KA 100 MU (monetary units) before 0:0:0 1/1/2000. KC agrees to perform arbitration in case of dispute. KA agrees to pay a maximum of 1000 MU in case of default. KB agrees to pay a maximum of 200 MU in case of default. KC agrees to pay a maximum of 500 MU in case of default. The conclusion of contracts. If a contract concludes without dispute, each party broadcasts a signed message “The contract with SHA-1 hash H concludes without reparations.” or possibly “The contract with SHA-1 hash H concludes with the following reparations: …” Upon the broadcast of all signatures, every participant credits the account of each party by the amount of his maximum reparation, removes the contract account, then credits or debits the account of each party according to the reparation schedule if there is one. The enforcement of contracts. If the parties to a contract cannot agree on an appropriate conclusion even with the help of the arbitrator, each party broadcasts a suggested reparation/fine schedule and any arguments or evidence in his favor. Each participant makes a determination as to the actual reparations and/or fines, and modifies his accounts accordingly. In the second protocol, the accounts of who has how much money are kept by a subset of the participants (called servers from now on) instead of everyone. These servers are linked by a Usenet-style broadcast channel. The format of transaction messages broadcasted on this channel remain the same as in the first protocol, but the affected participants of each transaction should verify that the message has been received and successfully processed by a randomly selected subset of the servers. Since the servers must be trusted to a degree, some mechanism is needed to keep them honest. Each server is required to deposit a certain amount of money in a special account to be used as potential fines or rewards for proof of misconduct. Also, each server must periodically publish and commit to its current money creation and money ownership databases. Each participant should verify that his own account balances are correct and that the sum of the account balances is not greater than the total amount of money created. This prevents the servers, even in total collusion, from permanently and costlessly expanding the money supply. New servers can also use the published databases to synchronize with existing servers. The protocol proposed in this article allows untraceable pseudonymous entities to cooperate with each other more efficiently, by providing them with a medium of exchange and a method of enforcing contracts. The protocol can probably be made more efficient and secure, but I hope this is a step toward making crypto-anarchy a practical as well as theoretical possibility. Appendix A: alternative b-money creation One of the more problematic parts in the b-money protocol is money creation. This part of the protocol requires that all of the account keepers decide and agree on the cost of particular computations. Unfortunately because computing technology tends to advance rapidly and not always publicly, this information may be unavailable, inaccurate, or outdated, all of which would cause serious problems for the protocol. So I propose an alternative money creation subprotocol, in which account keepers (everyone in the first protocol, or the servers in the second protocol) instead decide and agree on the amount of b-money to be created each period, with the cost of creating that money determined by an auction. Each money creation period is divided up into four phases, as follows: . Planning. The account keepers compute and negotiate with each other to determine an optimal increase in the money supply for the next period. Whether or not the account keepers can reach a consensus, they each broadcast their money creation quota and any macroeconomic calculations done to support the figures. Bidding. Anyone who wants to create b-money broadcasts a bid in the form of &lt;x, y&gt; where x is the amount of b-money he wants to create, and y is an unsolved problem from a predetermined problem class. Each problem in this class should have a nominal cost (in MIPS-years say) which is publicly agreed on. Computation. After seeing the bids, the ones who placed bids in the bidding phase may now solve the problems in their bids and broadcast the solutions. Money creation. Each account keeper accepts the highest bids (among those who actually broadcasted solutions) in terms of nominal cost per unit of b-money created and credits the bidders’ accounts accordingly. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/b_money.html#rezumat",
    "relUrl": "/docs/Bitcoin/b_money.html#rezumat"
  },"9": {
    "doc": "b-money",
    "title": "b-money",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/b_money.html",
    "relUrl": "/docs/Bitcoin/b_money.html"
  },"10": {
    "doc": "Bitcoin",
    "title": "Documentație",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/bitcoin#documenta%C8%9Bie",
    "relUrl": "/docs/bitcoin#documentație"
  },"11": {
    "doc": "Bitcoin",
    "title": "Cuprins",
    "content": ". | Documentație | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/bitcoin#cuprins",
    "relUrl": "/docs/bitcoin#cuprins"
  },"12": {
    "doc": "Bitcoin",
    "title": "Documentație",
    "content": "By default, Just the Docs uses a native system font stack for sans-serif fonts: . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/bitcoin#documenta%C8%9Bie-1",
    "relUrl": "/docs/bitcoin#documentație-1"
  },"13": {
    "doc": "Bitcoin",
    "title": "Bitcoin",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/bitcoin",
    "relUrl": "/docs/bitcoin"
  },"14": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "content": ". | Rezumat | Introduction | Transactions | Timestamp Server | Proof-of-Work | Network | Incentive | Reclaiming Disk Space | Simplified Payment Verification | Combining and Splitting Value | Privacy | Calculations | Conclusion | . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html"
  },"15": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Rezumat",
    "content": "A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they’ll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#rezumat",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#rezumat"
  },"16": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Introduction",
    "content": "Commerce on the Internet has come to rely almost exclusively on financial institutions serving as trusted third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the inherent weaknesses of the trust based model. Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for non-reversible services. With the possibility of reversal, the need for trust spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of fraud is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a trusted party. What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. Transactions that are computationally impractical to reverse would protect sellers from fraud, and routine escrow mechanisms could easily be implemented to protect buyers. In this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions. The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#introduction",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#introduction"
  },"17": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Transactions",
    "content": "We define an electronic coin as a chain of digital signatures. Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership. The problem of course is the payee can’t verify that one of the owners did not double-spend the coin. A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank. We need a way for the payee to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest transaction is the one that counts, so we don’t care about later attempts to double-spend. The only way to confirm the absence of a transaction is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced[1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#transactions",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#transactions"
  },"18": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Timestamp Server",
    "content": "The solution we propose begins with a timestamp server. A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post[2-5]. The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#timestamp-server",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#timestamp-server"
  },"19": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Proof-of-Work",
    "content": "To implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proof-of-work system similar to Adam Back’s Hashcash[6], rather than newspaper or Usenet posts. The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash. For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block’s hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it. The proof-of-work also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added. To compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they’re generated too fast, the difficulty increases. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#proof-of-work",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#proof-of-work"
  },"20": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Network",
    "content": "The steps to run the network are as follows: . | New transactions are broadcast to all nodes. | Each node collects new transactions into a block. | Each node works on finding a difficult proof-of-work for its block. | When a node finds a proof-of-work, it broadcasts the block to all nodes. | Nodes accept the block only if all transactions in it are valid and not already spent. | Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash. | . Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proof-of-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one. New transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#network",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#network"
  },"21": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Incentive",
    "content": "By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them. The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended. The incentive can also be funded with transaction fees. If the output value of a transaction is less than its input value, the difference is a transaction fee that is added to the incentive value of the block containing the transaction. Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free. The incentive may help encourage nodes to stay honest. If a greedy attacker is able to assemble more CPU power than all the honest nodes, he would have to choose between using it to defraud people by stealing back his payments, or using it to generate new coins. He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own wealth. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#incentive",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#incentive"
  },"22": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Reclaiming Disk Space",
    "content": "Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block’s hash, transactions are hashed in a Merkle Tree [7][2][5], with only the root included in the block’s hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored. A block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes * 6 * 24 * 365 = 4.2MB per year. With computer systems typically selling with 2GB of RAM as of 2008, and Moore’s Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#reclaiming-disk-space",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#reclaiming-disk-space"
  },"23": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Simplified Payment Verification",
    "content": "It is possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he’s convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it’s timestamped in. He can’t check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it. As such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker’s fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user’s software to download the full block and alerted transactions to confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker verification. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#simplified-payment-verification",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#simplified-payment-verification"
  },"24": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Combining and Splitting Value",
    "content": "Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender. It should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction’s history. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#combining-and-splitting-value",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#combining-and-splitting-value"
  },"25": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Privacy",
    "content": "The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party. The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous. The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone. This is similar to the level of information released by stock exchanges, where the time and size of individual trades, the “tape”, is made public, but without telling who the parties were. As an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner. Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#privacy",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#privacy"
  },"26": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Calculations",
    "content": "We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent. The race between the honest chain and an attacker chain can be characterized as a Binomial Random Walk. The success event is the honest chain being extended by one block, increasing its lead by +1, and the failure event is the attacker’s chain being extended by one block, reducing the gap by -1. The probability of an attacker catching up from a given deficit is analogous to a Gambler’s Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an infinite number of trials to try to reach breakeven. We can calculate the probability he ever reaches breakeven, or that an attacker ever catches up with the honest chain, as follows[8]: . pqqz=== probability an honest node finds the next block probability the attacker finds the next block probability the attacker will ever catch up from z blocks behind qz={1(q/p)zifp≤qifp&gt;q} Given our assumption that p&gt;q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn’t make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind. We now consider how long the recipient of a new transaction needs to wait before being sufficiently certain the sender can’t change the transaction. We assume the sender is an attacker who wants to make the recipient believe he paid him for a while, then switch it to pay back to himself after some time has passed. The receiver will be alerted when that happens, but the sender hopes it will be too late. The receiver generates a new key pair and gives the public key to the sender shortly before signing. This prevents the sender from preparing a chain of blocks ahead of time by working on it continuously until he is lucky enough to get far enough ahead, then executing the transaction at that moment. Once the transaction is sent, the dishonest sender starts working in secret on a parallel chain containing an alternate version of his transaction. The recipient waits until the transaction has been added to a block and z blocks have been linked after it. He doesn’t know the exact amount of progress the attacker has made, but assuming the honest blocks took the average expected time per block, the attacker’s potential progress will be a Poisson distribution with expected value: . λ=zqp To get the probability the attacker could still catch up now, we multiply the Poisson density for each amount of progress he could have made by the probability he could catch up from that point: . ∑k=0∞λke−λk!⋅{(q/p)(z−k)1ifk≤zifk&gt;z} Rearranging to avoid summing the infinite tail of the distribution… . 1−∑k=0zλke−λk!(1−(q/p)(z−k)) Converting to C code… . #include double AttackerSuccessProbability(double q, int z) { double p = 1.0 - q; double lambda = z * (q / p); double sum = 1.0; int i, k; for (k = 0; k &lt;= z; k++) { double poisson = exp(-lambda); for (i = 1; i &lt;= k; i++) poisson *= lambda / i; sum -= poisson * (1 - pow(q / p, z - k)); } return sum; } . Running some results, we can see the probability drop off exponentially with z. q=0.1 z=0 P=1.0000000 z=1 P=0.2045873 z=2 P=0.0509779 z=3 P=0.0131722 z=4 P=0.0034552 z=5 P=0.0009137 z=6 P=0.0002428 z=7 P=0.0000647 z=8 P=0.0000173 z=9 P=0.0000046 z=10 P=0.0000012 q=0.3 z=0 P=1.0000000 z=5 P=0.1773523 z=10 P=0.0416605 z=15 P=0.0101008 z=20 P=0.0024804 z=25 P=0.0006132 z=30 P=0.0001522 z=35 P=0.0000379 z=40 P=0.0000095 z=45 P=0.0000024 z=50 P=0.0000006 . Solving for P less than 0.1%… . P &lt; 0.001 q=0.10 z=5 q=0.15 z=8 q=0.20 z=11 q=0.25 z=15 q=0.30 z=24 q=0.35 z=41 q=0.40 z=89 q=0.45 z=340 . ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#calculations",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#calculations"
  },"27": {
    "doc": "Bitcoin: A Peer-to-Peer Electronic Cash System",
    "title": "Conclusion",
    "content": "We have proposed a system for electronic transactions without relying on trust. We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending. To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes work all at once with little coordination. They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis. Nodes can leave and rejoin the network at will, accepting the proof-of-work chain as proof of what happened while they were gone. They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them. Any needed rules and incentives can be enforced with this consensus mechanism. ",
    "url": "https://indigo-pa.github.io/nk_blog/docs/Bitcoin/bitcoin_2008.html#conclusion",
    "relUrl": "/docs/Bitcoin/bitcoin_2008.html#conclusion"
  },"28": {
    "doc": "Acasa",
    "title": "Milton Friedman, laureat al premiului Nobel, a prezis era Bitcoin în urmă cu două decenii",
    "content": "„Singurul lucru care lipsește, dar care va fi dezvoltat în curând, este un numerar electronic de încredere. O metodă în care puteți transfera fonduri de la A la B, fără ca A să îl cunoască pe B sau B să îl cunoască pe A. Asemănător cum pot lua o bancnotă de 20 de dolari de la tine fără a exista o înregistrare de unde a provenit.[…]. Genul acesta de lucruri se vor dezvolta pe Internet. ” Milton Friedman, 1999. Documentații test . ",
    "url": "https://indigo-pa.github.io/nk_blog/#milton-friedman-laureat-al-premiului-nobel-a-prezis-era-bitcoin-%C3%AEn-urm%C4%83-cu-dou%C4%83-decenii",
    "relUrl": "/#milton-friedman-laureat-al-premiului-nobel-a-prezis-era-bitcoin-în-urmă-cu-două-decenii"
  },"29": {
    "doc": "Acasa",
    "title": "Getting started",
    "content": ". Dependencies . Analiză tehnică LINKUSDT Nakamoto Just the Docs is built for Jekyll, a static site generator. View the quick start guide for more information. Just the Docs requires no special plugins and can run on GitHub Pages’ standard Jekyll compiler. The Jekyll SEO Tag plugin is included by default (no need to run any special installation) to inject SEO and open graph metadata on docs pages. For information on how to configure SEO and open graph metadata visit the Jekyll SEO Tag usage guide. Quick start: Use as a GitHub Pages remote theme . ",
    "url": "https://indigo-pa.github.io/nk_blog/#getting-started",
    "relUrl": "/#getting-started"
  },"30": {
    "doc": "Acasa",
    "title": "Acasa",
    "content": " ",
    "url": "https://indigo-pa.github.io/nk_blog/",
    "relUrl": "/"
  }
}
